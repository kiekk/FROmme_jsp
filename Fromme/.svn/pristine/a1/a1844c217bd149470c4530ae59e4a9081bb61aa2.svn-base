package com.fromme.app.classes;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.fromme.action.Action;
import com.fromme.action.ActionForward;
import com.fromme.app.classes.dao.ClassesDAO;
import com.fromme.app.classes.vo.CartVO;
import com.fromme.app.classes.vo.ClassesVO;
import com.fromme.app.order.OrderVO;

public class PaymentOkAction_saved implements Action{
	@Override
	public ActionForward execute(HttpServletRequest request, HttpServletResponse response) throws Exception {
		boolean orderCheck = false;
		ActionForward forward = new ActionForward();
		ClassesDAO c_dao = new ClassesDAO();
		ClassesVO c_vo =null;

		HttpSession session = request.getSession();
		String users_id = (String)session.getAttribute("session_id");

		int total_price = Integer.parseInt(request.getParameter("total_price"));  // 결제예정금액
		String email = request.getParameter("email");  // 결제완료 후 이메일 보내기 API?
		String phone = request.getParameter("phone");  // 결제완료 후 문자 보내기 API?

		//String pg_type = request.getParameter("pg_type");
		String pay_type = request.getParameter("pay_type"); // cash
		String depositor_name = request.getParameter("depositor_name");//주문자

		//장바구니 데이터와 클래스정보 조인해서 주문리스트에 추가
		List<OrderVO> orderList = c_dao.getCartForOrder(users_id);

		int order_state_no = 0;
		int reservation_no = 0;
		String path = "";

		//주문내역 하나씩 검사
		for (OrderVO order : orderList) {
			c_vo = c_dao.getDetail(order.getClasses_no());

			// 현재 사용자가 신청 후 예상 신청인원
			int after_apply_num = c_vo.getClasses_apply_num()+order.getQuantity();

			if( after_apply_num <= c_vo.getClasses_limit()) {
				//클래스 상태가 신청가능인 경우 결제 대기 처리
				order_state_no = 0;
				orderCheck = true;
				/**나중에 즉시결제와 결제 대기 처리*/	
			}else {
				// 실패처리
				order_state_no = 1;
				orderCheck = false;
				path = "/app/classes/orderFailed.jsp";
			}

			if(orderCheck) {
				// 주문 혹은 예약이 성공한 경우
				// 주문정보 저장
				order.setOrderlist_state_no(order_state_no);//결제 타입 저장
				order.setReservation_no(reservation_no);//대기번호 저장
				/**날짜는 시간이 들어가면 오류가 나서 substring 처리 좀 더 좋은 방법 있는지 강구*/
				order.setChoice_start_date(order.getChoice_start_date().substring(0, 11));
				order.setChoice_end_date(order.getChoice_end_date().substring(0, 11));

				// 주문내역에 추가하고 주문한 물건 장바구니에서 지우기
				c_dao.insertOrderlist(order);
				c_dao.deleteCartAfterPurchase(order);

				//클래스 정보에 신청인원 갱신
				c_vo.setClasses_apply_num(after_apply_num);
				if( after_apply_num == c_vo.getClasses_limit()) {
					// 사용자가 신청함으로서 신청인원이 정원에 도달할 경우 클래스 상태 변경
					c_vo.setClasses_state("NA");
					c_dao.updateClassesApplyNumAndChangeState(c_vo); 
				}else {
					c_dao.updateClassesApplyNum(c_vo); 
				}
				// 주문이 성공한 경우 주문완료 페이지로
				
				path = "/app/classes/orderCheck.jsp?total="+total_price;
			
			}
			
			
		}//for end
		


		forward.setRedirect(true);
		forward.setPath(request.getContextPath()+path);
		return forward;
	}
}
